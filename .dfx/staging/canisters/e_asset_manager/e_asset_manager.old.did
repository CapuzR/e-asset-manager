type UpdateCardError = 
 variant {
   NonExistentCard;
   NotAuthorized;
   Unknown: text;
 };
type Result_6 = 
 variant {
   err: Error;
   ok;
 };
type Result_5 = 
 variant {
   err: CardError;
   ok;
 };
type Result_4 = 
 variant {
   err: CardError;
   ok: Card;
 };
type Result_3 = 
 variant {
   err: CardCollectionError;
   ok: CardCollectionSuccess;
 };
type Result_2 = 
 variant {
   err: CardCollectionError;
   ok: vec CardCollectionSuccess;
 };
type Result_1 = 
 variant {
   err: UpdateCardError;
   ok;
 };
type Result = 
 variant {
   err: CardCollectionError;
   ok;
 };
type InitOptions = record {admins: vec principal;};
type Error = variant {NotAuthorized;};
type CardSuccess = 
 record {
   action: opt text;
   amount: opt nat;
   collectionName: text;
   id: text;
   index: nat;
   luck: opt nat;
   mimeType: text;
   target: opt text;
   thumbnail: text;
   url: text;
 };
type CardError = 
 variant {
   CardAlreadyExists;
   NonExistentCard;
   NotAuthorized;
   Unknown: text;
 };
type CardCollectionSuccess = 
 record {
   cards: vec CardSuccess;
   collectionId: text;
   description: text;
   haveMultipleAC: bool;
   kind: text;
   loreContext: text;
   name: text;
   standard: text;
 };
type CardCollectionError = 
 variant {
   CardCollectionAlreadyExists;
   NonExistentCardCollection;
   NotAuthorized;
   Unknown: text;
 };
type CardCollectionArgs = 
 record {
   batchUpdate: bool;
   collectionId: text;
   description: text;
   haveMultipleAC: bool;
   kind: text;
   loreContext: text;
   name: text;
   standard: text;
 };
type CardArgs = 
 record {
   action: opt text;
   amount: opt nat;
   collectionId: text;
   collectionName: text;
   id: text;
   index: nat;
   luck: opt nat;
   mimeType: text;
   target: opt text;
   thumbnail: text;
   url: text;
 };
type Card = 
 record {
   action: opt text;
   amount: opt nat;
   collectionId: text;
   collectionName: text;
   index: nat;
   luck: opt nat;
   mimeType: text;
   target: opt text;
   thumbnail: text;
   url: text;
 };
service : {
  addCardCollection: (CardCollectionArgs, vec CardArgs) -> (Result);
  addNewAdmin: (vec principal) -> (Result_6);
  deleteCard: (text) -> (Result_5);
  deleteCardCollection: (text) -> (Result);
  getAllCollections: () -> (Result_2) query;
  getCard: (CardArgs) -> (Result_4) query;
  getCardCollection: (text) -> (Result_3) query;
  getCollectionsByQuery: (text) -> (Result_2) query;
  updateCard: (CardArgs) -> (Result_1);
  updateCardCollection: (CardCollectionArgs, vec CardArgs) -> (Result);
}
