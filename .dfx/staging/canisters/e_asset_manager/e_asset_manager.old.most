// Version: 1.0.0
type AssocList<K, V> = List<(K, V)>;
type AssocList__1<K, V> = AssocList<K, V>;
type Branch<K, V> = {left : Trie<K, V>; right : Trie<K, V>; size : Nat};
type Card =
  {
    action : ?Text;
    amount : ?Nat;
    collectionId : Text;
    collectionName : Text;
    index : Nat;
    luck : ?Nat;
    mimeType : Text;
    target : ?Text;
    thumbnail : Text;
    url : Text
  };
type CardCollection =
  {
    collectionId : Text;
    description : Text;
    haveMultipleAC : Bool;
    kind : Text;
    loreContext : Text;
    name : Text;
    standard : Text
  };
type Hash = Nat32;
type Key<K> = {hash : Hash; key : K};
type Leaf<K, V> = {keyvals : AssocList__1<Key<K>, V>; size : Nat};
type List<T> = ?(T, List<T>);
type Trie<K, V> = {#branch : Branch<K, V>; #empty; #leaf : Leaf<K, V>};
actor {
  stable var admins : [Principal];
  stable var cardCollections :
    {
      #branch : Branch<Text, CardCollection>;
      #empty;
      #leaf : Leaf<Text, CardCollection>
    };
  stable var cards :
    {#branch : Branch<Text, Card>; #empty; #leaf : Leaf<Text, Card>};
  stable var collectionCardRelEntries : [(Text, Text)]
};
