// Version: 1.0.0
type AssocList<K, V> = List<(K, V)>;
type AssocList__1<K, V> = AssocList<K, V>;
type Branch<K, V> = {left : Trie<K, V>; right : Trie<K, V>; size : Nat};
type Card =
  {
    collectionId : Text;
    collectionName : Text;
    index : Nat;
    mimeType : Text;
    stats : [CardStats__1];
    thumbnail : Text;
    url : Text
  };
type CardCollection =
  {
    collectionId : Text;
    description : Text;
    filters : [Filter__1];
    haveMultipleAC : Bool;
    kind : Text;
    loreContext : Text;
    name : Text;
    standard : Text
  };
type CardStats__1 =
  {
    #BountyRush : [Property__1];
    #ElementumGeneral : [Property__1];
    #Traits : [Property__1]
  };
type Checkbox__1 = {options : [Text]};
type FieldType__1 =
  {#Checkbox : Checkbox__1; #Range : [Nat]; #TextField : Text};
type FilterDetails__1 = {kind : FieldType__1; name : Text};
type Filter__1 =
  {
    #BountyRush : [FilterDetails__1];
    #ElementumGeneral : [FilterDetails__1];
    #Traits : [FilterDetails__1]
  };
type Hash = Nat32;
type Key<K> = {hash : Hash; key : K};
type Leaf<K, V> = {keyvals : AssocList__1<Key<K>, V>; size : Nat};
type List<T> = ?(T, List<T>);
type Property__1 = {name : Text; value : Value__1};
type Trie<K, V> = {#branch : Branch<K, V>; #empty; #leaf : Leaf<K, V>};
type Value__1 =
  {
    #Array : [Value__1];
    #Blob : Blob;
    #Bool : Bool;
    #Bytes : [Nat8];
    #Class : [Property__1];
    #Float : Float;
    #Int : Int;
    #Int16 : Int16;
    #Int32 : Int32;
    #Int64 : Int64;
    #Int8 : Int8;
    #Nat : Nat;
    #Nat16 : Nat16;
    #Nat32 : Nat32;
    #Nat64 : Nat64;
    #Nat8 : Nat8;
    #Option : ?Value__1;
    #Principal : Principal;
    #Text : Text
  };
actor {
  stable var admins : [Principal];
  stable var cardCollections :
    {
      #branch : Branch<Text, CardCollection>;
      #empty;
      #leaf : Leaf<Text, CardCollection>
    };
  stable var cards :
    {#branch : Branch<Text, Card>; #empty; #leaf : Leaf<Text, Card>};
  stable var collectionCardRelEntries : [(Text, Text)]
};
